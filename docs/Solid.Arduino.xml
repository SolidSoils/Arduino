<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Solid.Arduino</name>
  </assembly>
  <members>
    <member name="T:Solid.Arduino.ArduinoSession">
      <summary>
             Represents an active layer for serial communication with an Arduino board.
             </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.#ctor(Solid.Arduino.ISerialConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:Solid.Arduino.ArduinoSession" /> class.
            </summary>
      <param name="connection">The serial port connection</param>
      <exception cref="T:System.ArgumentNullException">connection</exception>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.#ctor(Solid.Arduino.ISerialConnection,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Solid.Arduino.ArduinoSession" /> class.
            </summary>
      <param name="connection">The serial port connection</param>
      <param name="timeOut">The response time out in milliseconds</param>
      <exception cref="T:System.ArgumentNullException">connection</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">timeOut</exception>
    </member>
    <member name="E:Solid.Arduino.ArduinoSession.AnalogStateReceived">
      <summary>
            Event, raised when an analog state message (command 0xE0) is received.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.Clear">
      <summary>
            Closes and reopens the underlying connection and clears all buffers and queues.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ConfigureServo(System.Int32,System.Int32,System.Int32)">
      <summary>
            Configures the minimum and maximum pulse length for a servo pin.
            </summary>
      <param name="pinNumber">The pin number</param>
      <param name="minPulse">Minimum pulse length</param>
      <param name="maxPulse">Maximum pulse length</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.CreateAnalogStateMonitor">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.AnalogState" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.CreateAnalogStateMonitor(System.Int32)">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.AnalogState" /> messages for a specific channel.
            </summary>
      <param name="channel">The channel to track</param>
      <returns>
            An <see cref="T:System.IObservable`1" /> interface
            </returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.CreateDigitalStateMonitor">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.DigitalPortState" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.CreateDigitalStateMonitor(System.Int32)">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.DigitalPortState" /> messages for a specific port.
            </summary>
      <param name="port">The port to track</param>
      <returns>
            An <see cref="T:System.IObservable`1" /> interface
            </returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.CreateI2CReplyMonitor">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.I2C.I2CReply" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.CreateReceivedStringMonitor">
      <summary>
            Creates an observable object tracking received ASCII <see cref="T:System.String" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="E:Solid.Arduino.ArduinoSession.DigitalStateReceived">
      <summary>
            Event, raised when a digital I/O message (command 0x90) is received.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.Dispose">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Solid.Arduino.ArduinoSession.Dispose</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetBoardAnalogMapping">
      <summary>
            Gets the channel-to-pin mappings of the party system's analog lines.
            </summary>
      <returns>The channel-to-pin mappings</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetBoardAnalogMappingAsync">
      <summary>
            Asynchronously gets the channel-to-pin mappings of the party system's analog lines.
            </summary>
      <returns>The channel-to-pin mappings</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetBoardCapability">
      <summary>
            Gets a summary of the party system's capabilities.
            </summary>
      <returns>The system's capabilities</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetBoardCapabilityAsync">
      <summary>
            Asynchronously gets a summary of the party system's capabilities.
            </summary>
      <returns>The system's capabilities</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetFirmware">
      <summary>
            Gets the firmware signature of the party system.
            </summary>
      <returns>The firmware signature</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetFirmwareAsync">
      <summary>
            Asynchronously gets the firmware signature of the party system.
            </summary>
      <returns>The firmware signature</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetI2CReply(System.Int32,System.Int32)">
      <summary>
            Gets byte data from the party system, read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An <see cref="T:Solid.Arduino.I2C.I2CReply" /> object holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetI2CReply(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets byte data from the party system, read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address and register</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An <see cref="T:Solid.Arduino.I2C.I2CReply" /> object holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetI2CReplyAsync(System.Int32,System.Int32)">
      <summary>
            Asynchronously gets byte data from the party system, read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetI2CReplyAsync(System.Int32,System.Int32,System.Int32)">
      <summary>
            Asynchronously gets byte data from the party system, read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetPinState(System.Int32)">
      <summary>
            Gets a pin's mode (digital input/output, analog etc.) and actual value.
            </summary>
      <param name="pinNumber">The pin number</param>
      <returns>The pin's state</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetPinStateAsync(System.Int32)">
      <summary>
            Asynchronously gets a pin's mode (digital input/output, analog etc.) and actual value.
            </summary>
      <param name="pinNumber">The pin number</param>
      <returns>The pin's state</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetProtocolVersion">
      <summary>
            Gets the protocol version implemented on the party system.
            </summary>
      <returns>The implemented protocol version</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.GetProtocolVersionAsync">
      <summary>
            Asynchronously gets the protocol version implemented on the party system.
            </summary>
      <returns>The implemented protocol version</returns>
    </member>
    <member name="E:Solid.Arduino.ArduinoSession.I2CReplyReceived">
      <summary>
            Event, raised for every SYSEX I2C message not handled by an <see cref="T:Solid.Arduino.I2C.II2CProtocol" />'s Get method.
            </summary>
    </member>
    <member name="E:Solid.Arduino.ArduinoSession.MessageReceived">
      <summary>
            Event, raised for every SysEx (0xF0) and ProtocolVersion (0xF9) message not handled by an <see cref="T:Solid.Arduino.Firmata.IFirmataProtocol" />'s Get method.
            </summary>
    </member>
    <member name="P:Solid.Arduino.ArduinoSession.NewLine">
      <summary>
            Gets or sets the value used to interpret the end of strings received and sent.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.Read(System.Int32)">
      <summary>
            Reads a specified number of characters.
            </summary>
      <param name="length">The number of characters to be read (default is 1)</param>
      <returns>The string read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadAsync(System.Int32)">
      <summary>
            Reads a specified number of characters asynchronous.
            </summary>
      <param name="length">The number of characters to be read (default is 1)</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> returning the string read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadI2CContinuous(System.Int32,System.Int32)">
      <summary>
            Requests the party system to repeatedly send bytes read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's address</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadI2CContinuous(System.Int32,System.Int32,System.Int32)">
      <summary>
            Requests the party system to repeatedly send bytes read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadI2COnce(System.Int32,System.Int32)">
      <summary>
            Requests the party system to send bytes read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadI2COnce(System.Int32,System.Int32,System.Int32)">
      <summary>
            Requests the party system to send bytes read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadLine">
      <summary>
            Reads a string up to the next <see cref="P:Solid.Arduino.IStringProtocol.NewLine" /> character.
            </summary>
      <returns>The string read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadLineAsync">
      <summary>
            Reads a string asynchronous up to the next <see cref="P:Solid.Arduino.IStringProtocol.NewLine" /> character.
            </summary>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> returning the string read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadTo(System.Char)">
      <summary>
            Reads a string up to the first terminating character.
            </summary>
      <param name="terminator">The character identifying the end of the string</param>
      <returns>The string read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ReadToAsync(System.Char)">
      <summary>
            Reads a string asynchronous up to the first terminating character.
            </summary>
      <param name="terminator">The character identifying the end of the string</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> returning the string read</returns>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.RequestBoardAnalogMapping">
      <summary>
            Requests the party system to send the channel-to-pin mappings of its analog lines.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.RequestBoardCapability">
      <summary>
            Requests the party system to send a summary of its capabilities.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.RequestFirmware">
      <summary>
            Requests the party system to send a firmware message.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.RequestPinState(System.Int32)">
      <summary>
            Requests the party system to send the state of a given pin.
            </summary>
      <param name="pinNumber">The pin number</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.RequestProtocolVersion">
      <summary>
            Requests the party system to send a protocol version message.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.ResetBoard">
      <summary>
            Sends a reset message to the party system.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SendStringData(System.String)">
      <summary>
            Sends a message string.
            </summary>
      <param name="data">The message string</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetAnalogReportMode(System.Int32,System.Boolean)">
      <summary>
            Enables or disables analog sampling reporting.
            </summary>
      <param name="channel">The channel attached to the analog pin</param>
      <param name="enable">
        <c>True</c> if enabled, otherwise <c>false</c></param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetDigitalPin(System.Int32,System.Boolean)">
      <summary>
            Sets a HI or LO value on a digital output pin.
            </summary>
      <param name="pinNumber">The pin number</param>
      <param name="value">The value (<c>false</c> = Low, <c>true</c> = High)</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetDigitalPin(System.Int32,System.Int64)">
      <summary>
            Sets an analog value on a PWM or Servo enabled analog output pin.
            </summary>
      <param name="pinNumber">The pin number.</param>
      <param name="value">The value</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetDigitalPinMode(System.Int32,Solid.Arduino.Firmata.PinMode)">
      <summary>
            Sets a pin's mode (digital input/digital output/analog/PWM/servo etc.).
            </summary>
      <param name="pinNumber">The number of the pin</param>
      <param name="mode">The pin's mode</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetDigitalPort(System.Int32,System.Int32)">
      <summary>
            Sets the digital output pins of a given port LOW or HIGH.
            </summary>
      <param name="portNumber">The 0-based port number</param>
      <param name="pins">Binary value for the port's pins (0 to 7)</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetDigitalReportMode(System.Int32,System.Boolean)">
      <summary>
            Enables or disables digital input pin reporting for the given port.
            </summary>
      <param name="portNumber">The number of the port</param>
      <param name="enable">
        <c>true</c> if enabled, otherwise <c>false</c></param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetI2CReadInterval(System.Int32)">
      <summary>
            Sets the frequency at which data is read in the continuous mode.
            </summary>
      <param name="microseconds">The interval, expressed in microseconds</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.SetSamplingInterval(System.Int32)">
      <summary>
            Sets the frequency at which analog samples must be reported.
            </summary>
      <param name="milliseconds">The sampling interval in milliseconds</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.StopI2CReading">
      <summary>
            Commands the party system to stop sending I2C_REPLY messages.
            </summary>
    </member>
    <member name="E:Solid.Arduino.ArduinoSession.StringReceived">
      <summary>
            Event, raised for every ASCII stringmessage not handled by an <see cref="T:Solid.Arduino.IStringProtocol" />'s
            Read, ReadAsync, ReadLine, ReadLineAsync, ReadTo or ReadToAsync method
            </summary>
    </member>
    <member name="P:Solid.Arduino.ArduinoSession.TimeOut">
      <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a read operation does not finish.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.Write(System.String)">
      <summary>
            Writes a string to the serial output data stream.
            </summary>
      <param name="value">A string to be written</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.WriteI2C(System.Int32,System.Byte[])">
      <summary>
            Writes an arbitrary array of bytes to the given memory address.
            </summary>
      <param name="slaveAddress">The slave's target address</param>
      <param name="data">The data array</param>
    </member>
    <member name="M:Solid.Arduino.ArduinoSession.WriteLine(System.String)">
      <summary>
            Writes the specified string and the <see cref="P:System.IO.Ports.SerialPort.NewLine" /> value to the serial output stream.
            </summary>
      <param name="value">The string to write</param>
    </member>
    <member name="T:Solid.Arduino.EnhancedSerialConnection">
      <summary>
            Represents a serial port connection, supporting Mono.
            </summary>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Solid.Arduino.EnhancedSerialConnection" /> class using the highest serial port available at 115,200 bits per second.
            </summary>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.#ctor(System.String,Solid.Arduino.SerialBaudRate)">
      <summary>
            Initializes a new instance of <see cref="T:Solid.Arduino.EnhancedSerialConnection" /> class on the given serial port and at the given baud rate.
            </summary>
      <param name="portName">The port name (e.g. 'COM3')</param>
      <param name="baudRate">The baud rate</param>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Close">
      <summary>Closes the port connection, sets the <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> property to <see langword="false" />, and disposes of the internal <see cref="T:System.IO.Stream" /> object.</summary>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.  
  
-or-
  
 An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort" /> object were invalid.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Find">
      <summary>
            Finds a serial connection to a device supporting the Firmata protocol.
            </summary>
      <param name="text">A string to be written</param>
      <param name="buffer">The byte array that contains the data to write</param>
      <param name="offset">The zero-based byte offset in the array at which to begin copying bytes</param>
      <param name="count">The number of bytes to write</param>
      <returns>A <see cref="T:Solid.Arduino.ISerialConnection" /> instance or <c>null</c> if no connection is found</returns>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Find(System.String,System.String)">
      <summary>
             Finds a serial connection to a device supporting plain serial communications.
             </summary>
      <param name="query">The query text used to inquire the connection</param>
      <param name="expectedReply">The reply text the connected device is expected to respond with</param>
      <returns>A <see cref="T:Solid.Arduino.ISerialConnection" /> instance or <c>null</c> if no connection is found</returns>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Solid#Arduino#ISerialConnection#ReadByte">
      <summary>
            Reads a byte from the underlying serial input data stream.
            </summary>
      <returns>A byte value</returns>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Solid#Arduino#ISerialConnection#Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a specified number of bytes to the serial output stream using data from a byte array.
            </summary>
      <param name="buffer">The byte array that contains the data to write</param>
      <param name="offset">The zero-based byte offset in the array at which to begin copying bytes</param>
      <param name="count">The number of bytes to write</param>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Solid#Arduino#ISerialConnection#Write(System.String)">
      <summary>
            Writes a string to the serial output data stream.
            </summary>
      <param name="text">A string to be written</param>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialConnection.Solid#Arduino#ISerialConnection#WriteLine(System.String)">
      <summary>
            Writes the specified string and the <see cref="P:System.IO.Ports.SerialPort.NewLine" /> value to the serial output stream.
            </summary>
      <param name="text">The string to write</param>
    </member>
    <member name="T:Solid.Arduino.EnhancedSerialPort">
      <summary>
            Represents a system serial port, supporting .NET and Mono.
            </summary>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class.</summary>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor(System.ComponentModel.IContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class using the specified <see cref="T:System.ComponentModel.IContainer" /> object.</summary>
      <param name="container">An interface to a container.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class using the specified port name.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class using the specified port name and baud rate.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class using the specified port name, baud rate, and parity bit.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity" /> values.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class using the specified port name, baud rate, parity bit, and data bits.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity" /> values.</param>
      <param name="dataBits">The data bits value.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort" /> class using the specified port name, baud rate, parity bit, data bits, and stop bit.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity" /> values.</param>
      <param name="dataBits">The data bits value.</param>
      <param name="stopBits">One of the <see cref="P:System.IO.Ports.SerialPort.StopBits" /> values.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:Solid.Arduino.EnhancedSerialPort.Open">
      <summary>Opens a new serial port connection.</summary>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied to the port.  
  
-or-
  
 The current process, or another process on the system, already has the specified COM port open either by a <see cref="T:System.IO.Ports.SerialPort" /> instance or in unmanaged code.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">One or more of the properties for this instance are invalid. For example, the <see cref="P:System.IO.Ports.SerialPort.Parity" />, <see cref="P:System.IO.Ports.SerialPort.DataBits" />, or <see cref="P:System.IO.Ports.SerialPort.Handshake" /> properties are not valid values; the <see cref="P:System.IO.Ports.SerialPort.BaudRate" /> is less than or equal to zero; the <see cref="P:System.IO.Ports.SerialPort.ReadTimeout" /> or <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> property is less than zero and is not <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />.</exception>
      <exception cref="T:System.ArgumentException">The port name does not begin with "COM".  
  
-or-
  
 The file type of the port is not supported.</exception>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.  
  
-or-
  
 An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort" /> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port on the current instance of the <see cref="T:System.IO.Ports.SerialPort" /> is already open.</exception>
    </member>
    <member name="T:Solid.Arduino.ISerialConnection">
      <summary>
            Defines a serial port connection.
            </summary>
    </member>
    <member name="P:Solid.Arduino.ISerialConnection.BaudRate">
      <summary>Gets or sets the serial baud rate.</summary>
      <returns>The baud rate.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The baud rate specified is less than or equal to zero, or is greater than the maximum allowable baud rate for the device.</exception>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.  
  
-or-
  
 An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort" /> object were invalid.</exception>
    </member>
    <member name="P:Solid.Arduino.ISerialConnection.BytesToRead">
      <summary>
            Gets the number of bytes of data in the receive buffer.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ISerialConnection.Close">
      <summary>
            Closes the connection.
            </summary>
    </member>
    <member name="E:Solid.Arduino.ISerialConnection.DataReceived">
      <summary>
             Represents the method that will handle the data received event of a <see cref="T:Solid.Arduino.ISerialConnection" /> object.
            </summary>
    </member>
    <member name="P:Solid.Arduino.ISerialConnection.IsOpen">
      <summary>
            Gets a value indicating the open or closed status of the <see cref="T:Solid.Arduino.ISerialConnection" /> object.
            </summary>
    </member>
    <member name="P:Solid.Arduino.ISerialConnection.NewLine">
      <summary>
            Gets or sets the value used to interpret the end of strings received and sent
            using <see cref="M:Solid.Arduino.IStringProtocol.ReadLine" /> and <see cref="M:Solid.Arduino.IStringProtocol.WriteLine(System.String)" /> methods.
            </summary>
    </member>
    <member name="M:Solid.Arduino.ISerialConnection.Open">
      <summary>
            Opens the connection.
            </summary>
    </member>
    <member name="P:Solid.Arduino.ISerialConnection.PortName">
      <summary>Gets or sets the port for communications, including but not limited to all available COM ports.</summary>
      <returns>The communications port. The default is COM1.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IO.Ports.SerialPort.PortName" /> property was set to a value with a length of zero.  
  
 -or-  
  
 The <see cref="P:System.IO.Ports.SerialPort.PortName" /> property was set to a value that starts with "\\".  
  
 -or-  
  
 The port name was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IO.Ports.SerialPort.PortName" /> property was set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is open.</exception>
    </member>
    <member name="M:Solid.Arduino.ISerialConnection.ReadByte">
      <summary>
            Reads a byte from the underlying serial input data stream.
            </summary>
      <returns>A byte value</returns>
    </member>
    <member name="M:Solid.Arduino.ISerialConnection.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a specified number of bytes to the serial output stream using data from a byte array.
            </summary>
      <param name="buffer">The byte array that contains the data to write</param>
      <param name="offset">The zero-based byte offset in the array at which to begin copying bytes</param>
      <param name="count">The number of bytes to write</param>
    </member>
    <member name="M:Solid.Arduino.ISerialConnection.Write(System.String)">
      <summary>
            Writes a string to the serial output data stream.
            </summary>
      <param name="text">A string to be written</param>
    </member>
    <member name="M:Solid.Arduino.ISerialConnection.WriteLine(System.String)">
      <summary>
            Writes the specified string and the <see cref="P:System.IO.Ports.SerialPort.NewLine" /> value to the serial output stream.
            </summary>
      <param name="text">The string to write</param>
    </member>
    <member name="T:Solid.Arduino.IStringProtocol">
      <summary>
            Defines members for sending and receiving ASCII string messages.
            </summary>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.CreateReceivedStringMonitor">
      <summary>
            Creates an observable object tracking received ASCII <see cref="T:System.String" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="P:Solid.Arduino.IStringProtocol.NewLine">
      <summary>
            Gets or sets the value used to interpret the end of strings received and sent.
            </summary>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.Read(System.Int32)">
      <summary>
            Reads a specified number of characters.
            </summary>
      <param name="length">The number of characters to be read (default is 1)</param>
      <returns>The string read</returns>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.ReadAsync(System.Int32)">
      <summary>
            Reads a specified number of characters asynchronous.
            </summary>
      <param name="length">The number of characters to be read (default is 1)</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> returning the string read</returns>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.ReadLine">
      <summary>
            Reads a string up to the next <see cref="P:Solid.Arduino.IStringProtocol.NewLine" /> character.
            </summary>
      <returns>The string read</returns>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.ReadLineAsync">
      <summary>
            Reads a string asynchronous up to the next <see cref="P:Solid.Arduino.IStringProtocol.NewLine" /> character.
            </summary>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> returning the string read</returns>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.ReadTo(System.Char)">
      <summary>
            Reads a string up to the first terminating character.
            </summary>
      <param name="terminator">The character identifying the end of the string</param>
      <returns>The string read</returns>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.ReadToAsync(System.Char)">
      <summary>
            Reads a string asynchronous up to the first terminating character.
            </summary>
      <param name="terminator">The character identifying the end of the string</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> returning the string read</returns>
    </member>
    <member name="E:Solid.Arduino.IStringProtocol.StringReceived">
      <summary>
            Event, raised for every ASCII stringmessage not handled by an <see cref="T:Solid.Arduino.IStringProtocol" />'s
            Read, ReadAsync, ReadLine, ReadLineAsync, ReadTo or ReadToAsync method
            </summary>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.Write(System.String)">
      <summary>
            Writes a string to the serial output data stream.
            </summary>
      <param name="value">A string to be written</param>
    </member>
    <member name="M:Solid.Arduino.IStringProtocol.WriteLine(System.String)">
      <summary>
            Writes the specified string and the <see cref="P:System.IO.Ports.SerialPort.NewLine" /> value to the serial output stream.
            </summary>
      <param name="value">The string to write</param>
    </member>
    <member name="T:Solid.Arduino.SerialBaudRate">
      <summary>
            Enumeration of common baud rates, supported by Arduino boards
            </summary>
    </member>
    <member name="T:Solid.Arduino.SerialConnection">
      <summary>
            Represents a serial port connection.
            </summary>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Solid.Arduino.SerialConnection" /> class using the highest COM-port available at 115,200 bits per second.
            </summary>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.#ctor(System.String,Solid.Arduino.SerialBaudRate)">
      <summary>
            Initializes a new instance of <see cref="T:Solid.Arduino.SerialConnection" /> class on the given serial port and at the given baud rate.
            </summary>
      <param name="portName">The port name (e.g. 'COM3')</param>
      <param name="baudRate">The baud rate</param>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Close">
      <summary>Closes the port connection, sets the <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> property to <see langword="false" />, and disposes of the internal <see cref="T:System.IO.Stream" /> object.</summary>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.  
  
-or-
  
 An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort" /> object were invalid.</exception>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Ports.SerialPort" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.  
  
-or-
  
 An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort" /> object were invalid.</exception>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Find">
      <summary>
            Finds a serial connection to a device supporting the Firmata protocol.
            </summary>
      <param name="text">A string to be written</param>
      <param name="buffer">The byte array that contains the data to write</param>
      <param name="offset">The zero-based byte offset in the array at which to begin copying bytes</param>
      <param name="count">The number of bytes to write</param>
      <returns>A <see cref="T:Solid.Arduino.ISerialConnection" /> instance or <c>null</c> if no connection is found</returns>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Find(System.String,System.String)">
      <summary>
             Finds a serial connection to a device supporting plain serial communications.
             </summary>
      <param name="query">The query text used to inquire the connection</param>
      <param name="expectedReply">The reply text the connected device is expected to respond with</param>
      <returns>A <see cref="T:Solid.Arduino.ISerialConnection" /> instance or <c>null</c> if no connection is found</returns>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Open">
      <summary>Represents a serial port resource.</summary>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Solid#Arduino#ISerialConnection#ReadByte">
      <summary>
            Reads a byte from the underlying serial input data stream.
            </summary>
      <returns>A byte value</returns>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Solid#Arduino#ISerialConnection#Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a specified number of bytes to the serial output stream using data from a byte array.
            </summary>
      <param name="buffer">The byte array that contains the data to write</param>
      <param name="offset">The zero-based byte offset in the array at which to begin copying bytes</param>
      <param name="count">The number of bytes to write</param>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Solid#Arduino#ISerialConnection#Write(System.String)">
      <summary>
            Writes a string to the serial output data stream.
            </summary>
      <param name="text">A string to be written</param>
    </member>
    <member name="M:Solid.Arduino.SerialConnection.Solid#Arduino#ISerialConnection#WriteLine(System.String)">
      <summary>
            Writes the specified string and the <see cref="P:System.IO.Ports.SerialPort.NewLine" /> value to the serial output stream.
            </summary>
      <param name="text">The string to write</param>
    </member>
    <member name="T:Solid.Arduino.StringEventArgs">
      <summary>
            Event arguments passed to a <see cref="T:Solid.Arduino.StringReceivedHandler" /> type event.
            </summary>
    </member>
    <member name="P:Solid.Arduino.StringEventArgs.Text">
      <summary>
            Gets the string value being received.
            </summary>
    </member>
    <member name="T:Solid.Arduino.StringExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.String" /> objects.
            </summary>
    </member>
    <member name="M:Solid.Arduino.StringExtensions.To14BitIso(System.String)">
      <summary>
            Converts a <see cref="T:System.String" /> to a 14 bit bigendian <see cref="T:System.Byte" /> array.
            </summary>
      <param name="o">The string being converted</param>
      <returns>A <see cref="T:System.Byte" /> array.</returns>
    </member>
    <member name="M:Solid.Arduino.StringExtensions.ToBinaryCodedDecimal(System.String,System.Boolean)">
      <summary>
            Converts the argument string into its binary-coded decimal (BCD) representation, e.g.
             "1234" -&gt; { 0x12, 0x34 } (for Big Endian byte order)
             "1234" -&gt; { 0x43, 0x21 } (for Little Endian byte order)
            </summary>
      <param name="isLittleEndian">True if the byte order is "little end first (leftmost)".</param>
      <param name="o">String representation of BCD bytes.</param>
      <returns>Byte array representation of the string as BCD.</returns>
      <exception cref="T:System.ArgumentException">Thrown if the argument string isn't entirely made up of BCD pairs.</exception>
    </member>
    <member name="T:Solid.Arduino.StringReceivedHandler">
      <summary>
            Signature of event handlers capable of processing received strings.
            </summary>
      <param name="sender">The object raising the event</param>
      <param name="eventArgs">Event arguments holding a <see cref="T:System.String" /> message</param>
    </member>
    <member name="T:Solid.Arduino.Firmata.AnalogPinMapping">
      <summary>
            Represents a mapping between a MIDI channel and a physical pin number.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.AnalogPinMapping.Channel">
      <summary>
            Gets the MIDI channel number (0 - 15).
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.AnalogPinMapping.PinNumber">
      <summary>
            Gets the board's pin number (0 - 127).
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.AnalogState">
      <summary>
            Represents the analog level read from or set to an analog pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.AnalogState.Channel">
      <summary>
            Gets the MIDI channel number (0 - 15).
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.AnalogState.Level">
      <summary>
            Gets the analog level.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.AnalogStateReceivedHandler">
      <summary>
            Signature of event handlers capable of processing analog I/O messages.
            </summary>
      <param name="sender">The object raising the event</param>
      <param name="eventArgs">Event arguments holding a <see cref="T:Solid.Arduino.Firmata.AnalogState" /></param>
    </member>
    <member name="T:Solid.Arduino.Firmata.BoardAnalogMapping">
      <summary>
            Represents a summary of mappings between MIDI channels and physical pin numbers.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.BoardAnalogMapping.PinMappings">
      <summary>
            Gets the channel mapping array of the board's analog pins.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.BoardCapability">
      <summary>
            Represents a summary of pinmode capabilities supported by an Arduino board.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.BoardCapability.Pins">
      <summary>
            Gets the capability array of the board's pins.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.ByteArrayExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.Byte" /> arrays.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.ByteArrayExtensions.ConvertBinaryCodedDecimalToString(System.Byte[],System.Boolean)">
      <summary>
            Converts a <see cref="T:System.Byte" /> array holding binary coded digits to a readable string.
            </summary>
      <param name="data">The binary coded digit bytes</param>
      <param name="isLittleEndian">Value indicating if the first nibble contains the least significant part</param>
      <returns>A string containing numeric data</returns>
      <exception cref="T:System.ArgumentException">The array contains one or more non-BCD bytes.</exception>
    </member>
    <member name="T:Solid.Arduino.Firmata.DigitalPortState">
      <summary>
            Represents the pin states of a digital port.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.DigitalPortState.IsSet(System.Int32)">
      <summary>
            Gets a value indicating if a pin is set (1 or 'high').
            </summary>
      <param name="pin">The 0-based pin number</param>
      <returns>
        <c>true</c> when the pin has a binary 1 value, otherwise <c>false</c></returns>
    </member>
    <member name="P:Solid.Arduino.Firmata.DigitalPortState.Pins">
      <summary>
            Gets the bit-pattern value of the digital port.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.DigitalPortState.Port">
      <summary>
            Gets the digital port number.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.DigitalStateReceivedHandler">
      <summary>
            Signature of event handlers capable of processing digital I/O messages.
            </summary>
      <param name="sender">The object raising the event</param>
      <param name="eventArgs">Event arguments holding a <see cref="T:Solid.Arduino.Firmata.DigitalPortState" /></param>
    </member>
    <member name="T:Solid.Arduino.Firmata.FirmataEventArgs`1">
      <summary>
            Contains event data for a <see cref="T:Solid.Arduino.Firmata.AnalogStateReceivedHandler" /> and <see cref="T:Solid.Arduino.Firmata.DigitalStateReceivedHandler" /> type events.
            </summary>
      <typeparam name="T">Type of the event data</typeparam>
    </member>
    <member name="P:Solid.Arduino.Firmata.FirmataEventArgs`1.Value">
      <summary>
            Gets the received message.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.FirmataMessage">
      <summary>
            Represents a Firmata message received from an Arduino or Arduino compatible system.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.FirmataMessage.Time">
      <summary>
            Gets the time of the delivered message.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.FirmataMessage.Type">
      <summary>
            Gets the type enumeration of the message.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.FirmataMessage.Value">
      <summary>
            Gets the specific value delivered by the message.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.FirmataMessageEventArgs">
      <summary>
            Event arguments passed to a <see cref="T:Solid.Arduino.Firmata.MessageReceivedHandler" /> type event.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.FirmataMessageEventArgs.Value">
      <summary>
            Gets the received message.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.Firmware">
      <summary>
            Identifies the Arduino board's firmware.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.Firmware.MajorVersion">
      <summary>
            Gets the major version number.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.Firmware.MinorVersion">
      <summary>
            Gets the minor version number.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.Firmware.Name">
      <summary>
            Gets the name of the board's firmware.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.IFirmataProtocol">
      <summary>
            Defines a comprehensive set of members supporting the Firmata Protocol.
            Currently version 2.3 is supported.
            </summary>
    </member>
    <member name="E:Solid.Arduino.Firmata.IFirmataProtocol.AnalogStateReceived">
      <summary>
            Event, raised when an analog state message (command 0xE0) is received.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.CreateAnalogStateMonitor">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.AnalogState" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.CreateAnalogStateMonitor(System.Int32)">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.AnalogState" /> messages for a specific channel.
            </summary>
      <param name="channel">The channel to track</param>
      <returns>
            An <see cref="T:System.IObservable`1" /> interface
            </returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.CreateDigitalStateMonitor">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.DigitalPortState" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.CreateDigitalStateMonitor(System.Int32)">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.Firmata.DigitalPortState" /> messages for a specific port.
            </summary>
      <param name="port">The port to track</param>
      <returns>
            An <see cref="T:System.IObservable`1" /> interface
            </returns>
    </member>
    <member name="E:Solid.Arduino.Firmata.IFirmataProtocol.DigitalStateReceived">
      <summary>
            Event, raised when a digital I/O message (command 0x90) is received.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetBoardAnalogMapping">
      <summary>
            Gets the channel-to-pin mappings of the party system's analog lines.
            </summary>
      <returns>The channel-to-pin mappings</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetBoardAnalogMappingAsync">
      <summary>
            Asynchronously gets the channel-to-pin mappings of the party system's analog lines.
            </summary>
      <returns>The channel-to-pin mappings</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetBoardCapability">
      <summary>
            Gets a summary of the party system's capabilities.
            </summary>
      <returns>The system's capabilities</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetBoardCapabilityAsync">
      <summary>
            Asynchronously gets a summary of the party system's capabilities.
            </summary>
      <returns>The system's capabilities</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetFirmware">
      <summary>
            Gets the firmware signature of the party system.
            </summary>
      <returns>The firmware signature</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetFirmwareAsync">
      <summary>
            Asynchronously gets the firmware signature of the party system.
            </summary>
      <returns>The firmware signature</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetPinState(System.Int32)">
      <summary>
            Gets a pin's mode (digital input/output, analog etc.) and actual value.
            </summary>
      <param name="pinNumber">The pin number</param>
      <returns>The pin's state</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetPinStateAsync(System.Int32)">
      <summary>
            Asynchronously gets a pin's mode (digital input/output, analog etc.) and actual value.
            </summary>
      <param name="pinNumber">The pin number</param>
      <returns>The pin's state</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetProtocolVersion">
      <summary>
            Gets the protocol version implemented on the party system.
            </summary>
      <returns>The implemented protocol version</returns>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.GetProtocolVersionAsync">
      <summary>
            Asynchronously gets the protocol version implemented on the party system.
            </summary>
      <returns>The implemented protocol version</returns>
    </member>
    <member name="E:Solid.Arduino.Firmata.IFirmataProtocol.MessageReceived">
      <summary>
            Event, raised for every SysEx (0xF0) and ProtocolVersion (0xF9) message not handled by an <see cref="T:Solid.Arduino.Firmata.IFirmataProtocol" />'s Get method.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.RequestBoardAnalogMapping">
      <summary>
            Requests the party system to send the channel-to-pin mappings of its analog lines.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.RequestBoardCapability">
      <summary>
            Requests the party system to send a summary of its capabilities.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.RequestFirmware">
      <summary>
            Requests the party system to send a firmware message.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.RequestPinState(System.Int32)">
      <summary>
            Requests the party system to send the state of a given pin.
            </summary>
      <param name="pinNumber">The pin number</param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.RequestProtocolVersion">
      <summary>
            Requests the party system to send a protocol version message.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.ResetBoard">
      <summary>
            Sends a reset message to the party system.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SendStringData(System.String)">
      <summary>
            Sends a message string.
            </summary>
      <param name="data">The message string</param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetAnalogReportMode(System.Int32,System.Boolean)">
      <summary>
            Enables or disables analog sampling reporting.
            </summary>
      <param name="channel">The channel attached to the analog pin</param>
      <param name="enable">
        <c>True</c> if enabled, otherwise <c>false</c></param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetDigitalPin(System.Int32,System.Boolean)">
      <summary>
            Sets a HI or LO value on a digital output pin.
            </summary>
      <param name="pinNumber">The pin number</param>
      <param name="value">The value (<c>false</c> = Low, <c>true</c> = High)</param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetDigitalPin(System.Int32,System.Int64)">
      <summary>
            Sets an analog value on a PWM or Servo enabled analog output pin.
            </summary>
      <param name="pinNumber">The pin number.</param>
      <param name="value">The value</param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetDigitalPinMode(System.Int32,Solid.Arduino.Firmata.PinMode)">
      <summary>
            Sets a pin's mode (digital input/digital output/analog/PWM/servo etc.).
            </summary>
      <param name="pinNumber">The number of the pin</param>
      <param name="mode">The pin's mode</param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetDigitalPort(System.Int32,System.Int32)">
      <summary>
            Sets the digital output pins of a given port LOW or HIGH.
            </summary>
      <param name="portNumber">The 0-based port number</param>
      <param name="pins">Binary value for the port's pins (0 to 7)</param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetDigitalReportMode(System.Int32,System.Boolean)">
      <summary>
            Enables or disables digital input pin reporting for the given port.
            </summary>
      <param name="portNumber">The number of the port</param>
      <param name="enable">
        <c>true</c> if enabled, otherwise <c>false</c></param>
    </member>
    <member name="M:Solid.Arduino.Firmata.IFirmataProtocol.SetSamplingInterval(System.Int32)">
      <summary>
            Sets the frequency at which analog samples must be reported.
            </summary>
      <param name="milliseconds">The sampling interval in milliseconds</param>
    </member>
    <member name="T:Solid.Arduino.Firmata.MessageReceivedHandler">
      <summary>
            Signature of event handlers capable of processing Firmata messages.
            </summary>
      <param name="sender">The object raising the event</param>
      <param name="eventArgs">Event arguments holding a <see cref="T:Solid.Arduino.Firmata.FirmataMessage" /></param>
    </member>
    <member name="T:Solid.Arduino.Firmata.MessageType">
      <summary>
            Indicates the type of a Firmata Message.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.PinCapability">
      <summary>
            Contains information about the capabilities of a pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.Analog">
      <summary>
            Gets a value indicating if it is an analog pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.AnalogResolution">
      <summary>
            Gets the bit resolution for analog pins.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.DigitalInput">
      <summary>
            Gets a value indicating if the pin can be in digital input mode.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.DigitalOutput">
      <summary>
            Gets a value indicating if the pin can be in digital output mode.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.Encoder">
      <summary>
            Gets a value indicating if it is an encoder pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.I2C">
      <summary>
            Gets a value indicating if it is an I2c pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.InputPullup">
      <summary>
            Gets a value indicating if it is an input pullup pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.MaxStepNumber">
      <summary>
            Gets the maximum number of steps if it is a Stepper Control pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.OneWire">
      <summary>
            Gets a value indicating if it is an OneWire pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.PinNumber">
      <summary>
            Gets the 0-based number of the pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.Pwm">
      <summary>
            Gets a value indicating if the pin supports pulse width modulation.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.PwmResolution">
      <summary>
            Gets the bit resolution for PWM enabled pins.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.Serial">
      <summary>
            Gets a value indicating if it is a serial pin.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.Servo">
      <summary>
            Gets a value indicating if the pin supports servo motor control.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.ServoResolution">
      <summary>
            Gets the bit resolution for servo enabled pins.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinCapability.StepperControl">
      <summary>
            Gets a value indicating if it is a Stepper Control pin.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.PinMode">
      <summary>
            The modes a pin can be in or can be set to.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.PinState">
      <summary>
            Contains information about a pin's state.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinState.Mode">
      <summary>
            Gets pin's operating mode.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinState.PinNumber">
      <summary>
            The 0-based pin number
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.PinState.Value">
      <summary>
            Gets the value of the pin.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.ProtocolVersion">
      <summary>
            Represents the Firmata communication protocol version.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.ProtocolVersion.Major">
      <summary>
            Gets or sets the major version number.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.ProtocolVersion.Minor">
      <summary>
            Gets or sets the minor version number.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.StringData">
      <summary>
            Represents a string exchanged with the Firmata SYSEX STRING_DATA command.
            </summary>
    </member>
    <member name="P:Solid.Arduino.Firmata.StringData.Text">
      <summary>
            Gets or sets the string.
            </summary>
    </member>
    <member name="T:Solid.Arduino.Firmata.Servo.IServoProtocol">
      <summary>
            Defines Servo control related members of the Firmata protocol.
            </summary>
    </member>
    <member name="M:Solid.Arduino.Firmata.Servo.IServoProtocol.ConfigureServo(System.Int32,System.Int32,System.Int32)">
      <summary>
            Configures the minimum and maximum pulse length for a servo pin.
            </summary>
      <param name="pinNumber">The pin number</param>
      <param name="minPulse">Minimum pulse length</param>
      <param name="maxPulse">Maximum pulse length</param>
    </member>
    <member name="T:Solid.Arduino.I2C.I2CEventArgs">
      <summary>
            Event arguments passed to a <see cref="T:Solid.Arduino.I2C.I2CReplyReceivedHandler" /> type event.
            </summary>
    </member>
    <member name="P:Solid.Arduino.I2C.I2CEventArgs.Value">
      <summary>
            Gets the I2C message value being received.
            </summary>
    </member>
    <member name="T:Solid.Arduino.I2C.I2CReply">
      <summary>
            Container for an I2C message
            </summary>
    </member>
    <member name="P:Solid.Arduino.I2C.I2CReply.Address">
      <summary>
            Gets or sets the memory address.
            </summary>
    </member>
    <member name="P:Solid.Arduino.I2C.I2CReply.Data">
      <summary>
            Gets or sets the binary data.
            </summary>
    </member>
    <member name="P:Solid.Arduino.I2C.I2CReply.Register">
      <summary>
            Gets or sets the register number.
            </summary>
    </member>
    <member name="T:Solid.Arduino.I2C.I2CReplyReceivedHandler">
      <summary>
            Signature of event handlers capable of processing I2C_REPLY messages.
            </summary>
      <param name="sender">The object raising the event</param>
      <param name="eventArgs">Event arguments holding an <see cref="T:Solid.Arduino.I2C.I2CReply" /></param>
    </member>
    <member name="T:Solid.Arduino.I2C.II2CProtocol">
      <summary>
            Defines a comprehensive set of members supporting the I2C Protocol.
            </summary>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.CreateI2CReplyMonitor">
      <summary>
            Creates an observable object tracking <see cref="T:Solid.Arduino.I2C.I2CReply" /> messages.
            </summary>
      <returns>An <see cref="T:System.IObservable`1" /> interface</returns>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.GetI2CReply(System.Int32,System.Int32)">
      <summary>
            Gets byte data from the party system, read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An <see cref="T:Solid.Arduino.I2C.I2CReply" /> object holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.GetI2CReply(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets byte data from the party system, read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address and register</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An <see cref="T:Solid.Arduino.I2C.I2CReply" /> object holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.GetI2CReplyAsync(System.Int32,System.Int32)">
      <summary>
            Asynchronously gets byte data from the party system, read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> holding the data read</returns>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.GetI2CReplyAsync(System.Int32,System.Int32,System.Int32)">
      <summary>
            Asynchronously gets byte data from the party system, read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1" /> holding the data read</returns>
    </member>
    <member name="E:Solid.Arduino.I2C.II2CProtocol.I2CReplyReceived">
      <summary>
            Event, raised for every SYSEX I2C message not handled by an <see cref="T:Solid.Arduino.I2C.II2CProtocol" />'s Get method.
            </summary>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.ReadI2CContinuous(System.Int32,System.Int32)">
      <summary>
            Requests the party system to repeatedly send bytes read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's address</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.ReadI2CContinuous(System.Int32,System.Int32,System.Int32)">
      <summary>
            Requests the party system to repeatedly send bytes read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.ReadI2COnce(System.Int32,System.Int32)">
      <summary>
            Requests the party system to send bytes read from the given memory address.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.ReadI2COnce(System.Int32,System.Int32,System.Int32)">
      <summary>
            Requests the party system to send bytes read from the given memory address and register.
            </summary>
      <param name="slaveAddress">The slave's memory address</param>
      <param name="slaveRegister">The slave's register</param>
      <param name="bytesToRead">Number of bytes to read</param>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.SetI2CReadInterval(System.Int32)">
      <summary>
            Sets the frequency at which data is read in the continuous mode.
            </summary>
      <param name="microseconds">The interval, expressed in microseconds</param>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.StopI2CReading">
      <summary>
            Commands the party system to stop sending I2C_REPLY messages.
            </summary>
    </member>
    <member name="M:Solid.Arduino.I2C.II2CProtocol.WriteI2C(System.Int32,System.Byte[])">
      <summary>
            Writes an arbitrary array of bytes to the given memory address.
            </summary>
      <param name="slaveAddress">The slave's target address</param>
      <param name="data">The data array</param>
    </member>
  </members>
</doc>